# yaml-language-server: $schema=https://taskfile.dev/schema.json
# cspell:ignore taskfile,vcpkg,msbuild,makefiles,deinit

version: '3'

# set -eaux
shopt:
  - expand_aliases
  - nullglob

vars:
  BUILD_DIR_NAME: .build
  BUILD_SCRIPT_PATH: .github/build/build.sh
  # C:/Program Files/Git/bin/bash.exe
  BASH: '{{ expandenv "$USERPROFILE/scoop/apps/msys2/current/usr/bin/bash.exe" }}'
  MINGW64: '{{ expandenv "$USERPROFILE/scoop/apps/msys2/current/mingw64.exe" }}'
  SHELL: '{{ .BASH }}'

tasks:
  default:
    cmds:
      - task: build
      - cmd: cmake -B .build -S .
      - cmd: cmake --build .build

  rebuild:
    cmds:
      - task clean
      - task build

  build:
    cmds:
      - task: build-free-file-sync
      # - task: build-gcc
      # - task: build-curl
      # - task: build-openssl
      # - task: build-wxwidgets

  clean:
    cmds:
      - cmd: rm -rf "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME}}"
        ignore_error: true
      - cmd: cmd.exe /d /e:on /c rmdir /s /q "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME}}"
        ignore_error: true

  copy-resources:
    sources:
      - '{{joinPath .TASKFILE_DIR "FreeFileSync" "Build" "Resources"}}/*'
    generates:
      - '{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "Resources"}}/*'
    cmds:
      - cmd: |
          (
            echo ".zip\\"
          ) > "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "ExcludedResources.lst"}}"
      - cmd: |
          xcopy \
            /Y \
            /EXCLUDE:"{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "ExcludedResources.lst"}}" \
            /E /I /H /B /R /C \
            "{{joinPath .TASKFILE_DIR "FreeFileSync" "Build" "Resources"}}" \
            "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "Resources"}}" \

  zip-icons:
    cmds:
      - task: zip
        vars: { ZIP_RESOURCE_NAME: Icons }

  zip-languages:
    cmds:
      - task: zip
        vars: { ZIP_RESOURCE_NAME: Languages }

  zip:
    internal: true
    requires:
      vars: [BUILD_DIR_NAME, TASKFILE_DIR, ZIP_RESOURCE_NAME]
    sources:
      - '{{joinPath .TASKFILE_DIR "FreeFileSync" .ZIP_RESOURCE_NAME}}/*'
    generates:
      - '{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "Resources" .ZIP_RESOURCE_NAME}}.zip'
    cmds:
      - cmd: |
          7z a -tzip \
            "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "Resources" .ZIP_RESOURCE_NAME}}.zip" \
            "{{joinPath .TASKFILE_DIR "FreeFileSync" .ZIP_RESOURCE_NAME}}"

  format:
    cmds:
      - cmd: pnpm exec prettier --write .

  build-free-file-sync:
    deps: [wxwidgets, openssl, curl]
    aliases: [ffs]
    sources:
      - FreeFileSync/Source/Makefile
    generates:
      - FreeFileSync/Build/Bin/**/*
    cmds:
      - cmd: |
          "{{ fromSlash .SHELL }}" -c "make -C {{ joinPath .TASKFILE_DIR "FreeFileSync" "Source" | toSlash }}"

  run-shell:
    requires:
      vars: [SHELL_SCRIPT]
    sources:
      - '{{.SHELL_SCRIPT}}'
    vars:
      SHELL_SCRIPT_PATH: '{{joinPath .TASKFILE_DIR .SHELL_SCRIPT}}'
    env:
      MSYSTEM: MINGW64
    cmds:
      - cmd: |
          "{{ fromSlash .SHELL }}" --login -c "set -eax; {{.SHELL_SCRIPT_PATH | toSlash | shellQuote}}"

  build-gcc:
    aliases: [gcc]
    sources:
      - .github/build/*
    generates:
      - .build/gcc-*/obj/Makefile
    cmds:
      - task: run-shell
        vars: { SHELL_SCRIPT: .github/build/build-gcc.sh }

  build-openssl:
    aliases: [openssl, ssl]
    sources:
      - .github/build/*
    generates:
      - ./.build/openssl-*/**/*
    cmds:
      - task: run-shell
        vars: { SHELL_SCRIPT: .github/build/build-openssl.sh }

  # Curl depends on OpenSSL libraries
  build-curl:
    aliases: [curl]
    sources:
      - .github/build/*
    generates:
      - .build/lib/include/curl-*/curl.h
    cmds:
      - task: run-shell
        vars: { SHELL_SCRIPT: .github/build/build-curl.sh }

  build-wxwidgets:
    aliases: [wxwidgets, wx]
    sources:
      - .github/build/*
    generates:
      - .build/lib/include/wx-*/wx/wx.h
    cmds:
      - task: run-shell
        vars: { SHELL_SCRIPT: .github/build/build-wxwidgets.sh }
