# yaml-language-server: $schema=https://taskfile.dev/schema.json
# cspell:ignore taskfile,vcpkg,msbuild,makefiles,deinit

version: '3'

# set -eaux
shopt:
  - expand_aliases
  - nullglob

vars:
  BUILD_DIR_NAME: .build
  BUILD_SCRIPT_PATH: .github/build/build.sh
  # C:/Program Files/Git/bin/bash.exe
  BASH: '{{ expandenv "$USERPROFILE/scoop/apps/msys2/current/usr/bin/bash.exe" }}'
  MINGW64: '{{ expandenv "$USERPROFILE/scoop/apps/msys2/current/mingw64.exe" }}'
  SHELL: '{{ .BASH }}'

  RUN_WINDOWS: 'cmd /d /c'
  RUN_UNIX: 'sh -c'
  RUN: '{{if eq OS "windows"}}{{.RUN_WINDOWS}}{{ else }}{{.RUN_UNIX}}{{ end }}'

  VCPKG_BOOTSTRAP_BAT: "{{.TASKFILE_DIR}}/vcpkg/bootstrap-vcpkg.bat"
  VCPKG_BOOTSTRAP_SH: "{{.TASKFILE_DIR}}/vcpkg/bootstrap-vcpkg.sh"
  VCPKG_EXE: "{{.TASKFILE_DIR}}/vcpkg/vcpkg.exe"

  BUILD_TOOLCHAIN:
  BUILD_ARCH: x86_64
  BUILD_CC: gcc
  PACKAGE_PARTS:
    - "mingw-w64"
    - "{{.BUILD_TOOLCHAIN}}"
    - "{{.BUILD_ARCH}}"
  PACKAGE_NAME_PREFIX: '{{ without .PACKAGE_PARTS "" | join "-" }}'
  MSYS2_PACKAGES:
    - "git"
    - "ncurses"
    - "{{.PACKAGE_NAME_PREFIX}}-{{.BUILD_CC}}"
    - "{{.PACKAGE_NAME_PREFIX}}-binutils"
    - "{{.PACKAGE_NAME_PREFIX}}-cairo"
    - "{{.PACKAGE_NAME_PREFIX}}-gcc"
    - "{{.PACKAGE_NAME_PREFIX}}-toolchain"
    - "{{.PACKAGE_NAME_PREFIX}}-base-devel"
    - "{{.PACKAGE_NAME_PREFIX}}-gdk-pixbuf2"
    - "{{.PACKAGE_NAME_PREFIX}}-glib2"
    - "{{.PACKAGE_NAME_PREFIX}}-gstreamer"
    - "{{.PACKAGE_NAME_PREFIX}}-gtk2"
    - "{{.PACKAGE_NAME_PREFIX}}-libepoxy"
    - "{{.PACKAGE_NAME_PREFIX}}-ncurses"
    - "{{.PACKAGE_NAME_PREFIX}}-ntldd"
    - "{{.PACKAGE_NAME_PREFIX}}-openssl"
    - "{{.PACKAGE_NAME_PREFIX}}-pango"
    - "{{.PACKAGE_NAME_PREFIX}}-pkgconf"
    - "{{.PACKAGE_NAME_PREFIX}}-zlib"

env:
  VCPKG_DISABLE_METRICS: 1

tasks:
  default:
    cmds:
      - task: build

  rebuild:
    cmds:
      - task clean
      - task build

  build:
    deps: [vcpkg-download]
    cmds:
      - cmd: cmake -B .build -S .
      - cmd: cmake --build .build
      # - task: build-free-file-sync
      # - task: build-gcc
      # - task: build-curl
      # - task: build-openssl
      # - task: build-wxwidgets

  clean:
    cmds:
      - cmd: rm -rf "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME}}"
        ignore_error: true
      - cmd: cmd.exe /d /e:on /c rmdir /s /q "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME}}"
        ignore_error: true

  git-submodule-init:
    status:
      - 'test -f "{{.VCPKG_BOOTSTRAP_BAT}}"'
    cmds:
      - cmd: 'git -C "{{.TASKFILE_DIR}}" submodule update --init --recursive'

  vcpkg-integrate:
    deps: [vcpkg-download]
    internal: true
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_EXE }}" integrate install'

  vcpkg-download:
    deps: [git-submodule-init]
    status:
      - 'test -f "{{.VCPKG_EXE}}"'
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_BOOTSTRAP_BAT }}" -disableMetrics'

  vcpkg:
    deps: [vcpkg-download]
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_EXE }}" {{.CLI_ARGS}}'

  copy-resources:
    sources:
      - '{{joinPath .TASKFILE_DIR "FreeFileSync" "Build" "Resources"}}/*'
    generates:
      - '{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "Resources"}}/*'
    cmds:
      - cmd: |
          (
            echo ".zip\\"
          ) > "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "ExcludedResources.lst"}}"
      - cmd: |
          xcopy \
            /Y \
            /EXCLUDE:"{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "ExcludedResources.lst"}}" \
            /E /I /H /B /R /C \
            "{{joinPath .TASKFILE_DIR "FreeFileSync" "Build" "Resources"}}" \
            "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "Resources"}}" \

  zip-icons:
    cmds:
      - task: zip
        vars: { ZIP_RESOURCE_NAME: Icons }

  zip-languages:
    cmds:
      - task: zip
        vars: { ZIP_RESOURCE_NAME: Languages }

  zip:
    internal: true
    requires:
      vars: [BUILD_DIR_NAME, TASKFILE_DIR, ZIP_RESOURCE_NAME]
    sources:
      - '{{joinPath .TASKFILE_DIR "FreeFileSync" .ZIP_RESOURCE_NAME}}/*'
    generates:
      - '{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "Resources" .ZIP_RESOURCE_NAME}}.zip'
    cmds:
      - cmd: |
          7z a -tzip \
            "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME "Resources" .ZIP_RESOURCE_NAME}}.zip" \
            "{{joinPath .TASKFILE_DIR "FreeFileSync" .ZIP_RESOURCE_NAME}}"

  format:
    cmds:
      - cmd: pnpm exec prettier --write .

  run-shell:
    requires:
      vars: [SHELL_SCRIPT]
    sources:
      - '{{.SHELL_SCRIPT}}'
    vars:
      SHELL_SCRIPT_PATH: '{{joinPath .TASKFILE_DIR .SHELL_SCRIPT}}'
    env:
      MSYSTEM: MINGW64
    cmds:
      - cmd: |
          "{{ fromSlash .SHELL }}" --login -c "set -eax; {{.SHELL_SCRIPT_PATH | toSlash | shellQuote}}"

  build-free-file-sync:
    aliases: [ffs]
    sources:
      - FreeFileSync/Source/Makefile
    generates:
      - FreeFileSync/Build/Bin/**/*
    env:
      MSYSTEM: MINGW64
      MINGW_MOUNT_POINT: /mingw64
    cmds:
      - task: run-shell
        vars: { SHELL_SCRIPT: .github/build/build-free-file-sync.sh }

  build-gcc:
    aliases: [gcc]
    sources:
      - .github/build/*
    generates:
      - .build/gcc-*/obj/Makefile
    cmds:
      - task: run-shell
        vars: { SHELL_SCRIPT: .github/build/build-gcc.sh }

  build-openssl:
    aliases: [openssl, ssl]
    sources:
      - .github/build/*
    generates:
      - ./.build/openssl-*/**/*
    cmds:
      - task: run-shell
        vars: { SHELL_SCRIPT: .github/build/build-openssl.sh }

  # Curl depends on OpenSSL libraries
  build-curl:
    aliases: [curl]
    sources:
      - .github/build/*
    generates:
      - .build/lib/include/curl-*/curl.h
    cmds:
      - task: run-shell
        vars: { SHELL_SCRIPT: .github/build/build-curl.sh }

  build-wxwidgets:
    aliases: [wxwidgets, wx]
    sources:
      - .github/build/*
    generates:
      - .build/lib/include/wx-*/wx/wx.h
    cmds:
      - task: run-shell
        vars: { SHELL_SCRIPT: .github/build/build-wxwidgets.sh }

  install-packages:
    cmds:
      - task: install-packages-scoop-pkg-config
      - task: install-packages-pacman

  install-packages-scoop-pkg-config:
    deps: [scoop-install]
    platforms: [windows]
    status:
      - pkg-config --version
    cmds:
      - cmd: |
          scoop install \
            extras/pkg-config-lite \
            main/winflexbison

  install-packages-pacman:
    vars:
      PACKAGES: '{{.MSYS2_PACKAGES | join " "}}'
    cmds:
      - task: pacman-unlock
      - cmd: 'pacman -Syu --noconfirm'
        ignore_error: true
      - cmd: 'pacman -S --needed --noconfirm {{ .PACKAGES }}'
        ignore_error: true
      - task: pacman-unlock

  install-each-package:
    deps: [update-packages]
    vars:
      PACKAGES: '{{.MSYS2_PACKAGES | join " "}}'
    cmds:
      - for:
          var: MSYS2_PACKAGES
        task: install-package-pacman
        vars:
          PACKAGE: '{{.ITEM}}'

  pacman-unlock:
    status:
      - 'test ! -f /var/lib/pacman/db.lck'
    cmds:
      - cmd: 'rm -f /var/lib/pacman/db.lck'
        ignore_error: true

  install-package-pacman:
    deps: [pacman-unlock]
    requires:
      vars: [PACKAGE]
    desc: 'Install package {{.PACKAGE}}'
    preconditions:
      - 'pacman --version'
    status:
      - 'pacman -Qk {{.PACKAGE}}'
    cmds:
      - cmd: 'pacman -S --needed --noconfirm "{{.PACKAGE}}"'
